stages:
  - compile
  - test
  - build
  - deploy

build_back:
  stage: compile
  image: maven:3.8.7-openjdk-18-slim
  script:
    - echo "Building backend :)"
    - cd digital_booking
    - mvn clean install
    - echo "Finished building the backend :)"
  artifacts:
    expire_in: 1 week
    paths:
      - digital_booking/target/digital_booking_API.jar
  only:
    - dev
    - main

build_front:
  stage: compile
  image: node:lts
  script:
    - echo "Iniciando build do frontend :)"
    - cd projeto-integrador
    - npm install
    - npm run build
    - echo "Build realizado com sucesso :)"
  artifacts:
    expire_in: 1 day
    paths:
      - projeto-integrador/dist/
  only:
    - dev
    - main

# build_doc_storybook:
#   stage: build
#   image: node:16.19.1
#   script:
#     - echo "Iniciando build do storybook :)"
#     - cd projeto-integrador
#     - npm install
#     - npm run build-storybook
#     - echo "Build realizado com sucesso :)"
#   artifacts:
#     expire_in: 1 day
#     paths:
#       - projeto-integrador/storybook-static/
#   only:
#     - dev

# frontend_test:
#   stage: test
#   image: cypress/base:18.14.1
#   script:
#     - cd projeto-integrador
#     - npm ci
#     - npm run preview &
#     - npm run e2e
#     - npm run cy:report
#   artifacts:
#     when: always
#     expire_in: 1 week
#     paths:
#       - projeto-integrador/cypress/results/test-result.xml
#       - projeto-integrador/cypress/videos
#       - projeto-integrador/cypress/screenshots
#     reports:
#       junit: projeto-integrador/cypress/results/test-result.xml
#   only:
#     - dev
#     - main

# backend_test:
#   stage: test
#   image: cypress/base:18.14.1
#   script:
#     - cd testing/testes-com-cypress/teste-e2e
#     - npm ci
#     - npm run cy:run
#     - npm run cy:report
#   artifacts:
#     when: always
#     expire_in: 1 week
#     paths:
#       - testing/testes-com-cypress/teste-e2e/cypress/results/test-result.xml
#       - testing/testes-com-cypress/teste-e2e/cypress/videos
#       - testing/testes-com-cypress/teste-e2e/cypress/screenshots
#     reports:
#       junit: testing/testes-com-cypress/teste-e2e/cypress/results/test-result.xml
#   only:
#     - dev
#     - main

# postman-api-tests:
#   stage: test
#   image: cimg/base:2021.04
#   before_script:
#     # Installing Postman CLI
#     - curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
#   script:
#     # Login using your Postman API keys
#     - postman login --with-api-key $POSTMAN_API_KEY
#     - postman collection run "5473166-c700f98c-404d-40b5-a7a7-1bcf64423064" -e "5473166-46b6a7a2-6ffa-4eea-ac18-88d188f8adea"
#     - postman collection run "5473166-5e2e9a23-ca62-4254-b8bd-b9cc5b3195ea" -e "5473166-46b6a7a2-6ffa-4eea-ac18-88d188f8adea" 
#     - postman collection run "5473166-149a713f-4bac-42cd-83df-236de9a15e69" -e "5473166-46b6a7a2-6ffa-4eea-ac18-88d188f8adea"
#     - postman collection run "5473166-53f30cf9-5a88-46d7-82cf-712ce58de2b6" -e "5473166-46b6a7a2-6ffa-4eea-ac18-88d188f8adea"    
#     - postman collection run "5473166-1d5549bc-b2ed-42da-bfa1-d0dcbf03a005" -e "5473166-46b6a7a2-6ffa-4eea-ac18-88d188f8adea"
#     - postman collection run "5473166-af6e3bf1-24ec-42da-b48e-51c87db39d47" -e "5473166-46b6a7a2-6ffa-4eea-ac18-88d188f8adea"
#     - postman collection run "5473166-4a78f575-7a9a-4022-b0c6-467f5936d5da" -e "5473166-46b6a7a2-6ffa-4eea-ac18-88d188f8adea"
#     - postman collection run "5473166-db89a432-16a2-4ec5-9233-dd22a54120da" -e "5473166-46b6a7a2-6ffa-4eea-ac18-88d188f8adea"
#     - postman collection run "5473166-7989d066-f37b-4085-89ad-fbb78bef0292" -e "5473166-46b6a7a2-6ffa-4eea-ac18-88d188f8adea"
#     - postman collection run "5473166-fee1e702-0e49-47c9-8d1f-71dcbe6d1eb4" -e "5473166-46b6a7a2-6ffa-4eea-ac18-88d188f8adea"    
#   only:
#     - dev

# build_docker_dev_back:
#   stage: build
#   image: docker:latest
#   variables:
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: ""
#   services:
#     - docker:dind
#   script:
#     - docker info
#     - echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER docker.io --password-stdin
#     - docker build -t $DOCKERHUB_USER/spring-srv:dev ./digital_booking
#     - docker push $DOCKERHUB_USER/spring-srv:dev
#   only:
#     - dev

build_docker_main_back:
  stage: build
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  script:
    - docker info
    - echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER docker.io --password-stdin
    - docker build -t $DOCKERHUB_USER/spring-srv:main ./digital_booking
    - docker push $DOCKERHUB_USER/spring-srv:main
  only:
    - main

# build_docker_dev_front:
#   stage: build
#   image: docker:latest
#   variables:
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: ""
#   services:
#     - docker:dind
#   script:
#     - docker info
#     - echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER docker.io --password-stdin
#     - docker build -t $DOCKERHUB_USER/apache-srv:dev ./projeto-integrador
#     - docker push $DOCKERHUB_USER/apache-srv:dev
#   only:
#     - dev

build_docker_main_front:
  stage: build
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:dind
  script:
    - docker info
    - echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER docker.io --password-stdin
    - docker build -t $DOCKERHUB_USER/apache-srv:main ./projeto-integrador
    - docker push $DOCKERHUB_USER/apache-srv:main
  only:
    - main

deploy_dev_front:
  stage: deploy
  image: alpine:3.11
  before_script:
    - apk update && apk add openssh-client bash
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_DEV_FRONT_KEY" | tr -d '\r' | ssh-add - > /dev/null+
    - touch ~/.ssh/config
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh-keyscan -H $DEPLOY_SERVER_DEV_FRONT >> ~/.ssh/known_hosts
  script:
    - echo "Deploy Iniciado..."
    - echo "Criando pasta temporária no servidor..."
    - ssh ubuntu@$DEPLOY_SERVER_DEV_FRONT "mkdir ~/temp"
    - echo "Copiando arquivos para o servidor..."
    - scp -Cr -i $SSH_DEV_FRONT_KEY_FILE ./projeto-integrador/dist/* ubuntu@$DEPLOY_SERVER_DEV_FRONT:~/temp
    - echo "Copiando htaccess para o servidor..."
    - scp -Cr -i $SSH_DEV_FRONT_KEY_FILE ./projeto-integrador/.htaccess ubuntu@$DEPLOY_SERVER_DEV_FRONT:~/temp
    - echo "Limpando WWW do servidor..."
    - ssh ubuntu@$DEPLOY_SERVER_DEV_FRONT "sudo rm -r /var/www/$DEPLOY_SERVER_DEV_FRONT/home/*"
    - echo "Movendo arquivos para a pasta correta no servidor..."
    - ssh ubuntu@$DEPLOY_SERVER_DEV_FRONT "sudo cp -r ~/temp/* /var/www/$DEPLOY_SERVER_DEV_FRONT/home"
    - echo "Excluindo temp..."
    - ssh ubuntu@$DEPLOY_SERVER_DEV_FRONT "sudo rm -r ~/temp/"
    - echo "Finished deploying the app."
  only:
    - dev

# deploy_dev_back:
#   stage: deploy
#   image: alpine:3.11
#   before_script:
#     - apk update && apk add openssh-client bash
#     - mkdir -p ~/.ssh
#     - eval $(ssh-agent -s)
#     - echo "$SSH_DEV_BACK_KEY" | tr -d '\r' | ssh-add - > /dev/null
#     - touch ~/.ssh/config
#     - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#     - ssh-keyscan -H $DEPLOY_SERVER_DEV_BACKEND >> ~/.ssh/known_hosts
#   script:
#     - echo "Deploying started..."
#     - ssh ubuntu@$DEPLOY_SERVER_DEV_BACKEND "sudo systemctl stop api-sys.service"
#     - scp ./digital_booking/target/digital_booking_API.jar ubuntu@$DEPLOY_SERVER_DEV_BACKEND:~/api-sys/
#     - ssh ubuntu@$DEPLOY_SERVER_DEV_BACKEND "sudo systemctl start api-sys.service"
#     - echo "Finished deploying the app."
#   only:
#     - dev
 
# deploy_doc_storybook:
#   stage: deploy
#   image: alpine:3.11
#   before_script:
#     - apk update && apk add openssh-client bash
#     - mkdir -p ~/.ssh
#     - eval $(ssh-agent -s)
#     - echo "$SSH_DEV_FRONT_KEY" | tr -d '\r' | ssh-add - > /dev/null+
#     - touch ~/.ssh/config
#     - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
#     - ssh-keyscan -H $DEPLOY_SERVER_STORYBOOK >> ~/.ssh/known_hosts
#   script:
#     - echo "Deploy do storybook Iniciado..."
#     - echo "Criando pasta temporária no servidor..."
#     - ssh ubuntu@$DEPLOY_SERVER_STORYBOOK "mkdir ~/temp_storybook"
#     - echo "Copiando arquivos para o servidor..."
#     - scp -Cr -i $SSH_DEV_FRONT_KEY_FILE ./projeto-integrador/storybook-static/* ubuntu@$DEPLOY_SERVER_STORYBOOK:~/temp_storybook
#     - echo "Limpando WWW do storybook..."
#     - ssh ubuntu@$DEPLOY_SERVER_STORYBOOK "sudo rm -r /var/www/$DEPLOY_SERVER_STORYBOOK/*"
#     - echo "Movendo arquivos para a pasta correta no servidor..."
#     - ssh ubuntu@$DEPLOY_SERVER_STORYBOOK "sudo cp -r ~/temp_storybook/* /var/www/$DEPLOY_SERVER_STORYBOOK"
#     - echo "Excluindo temp..."
#     - ssh ubuntu@$DEPLOY_SERVER_STORYBOOK "sudo rm -r ~/temp_storybook"
#     - echo "Fim do deploy do storybook."
#   only:
#     - dev